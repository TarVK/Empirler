[head]
    [html]
        <link rel="icon" type="image/png" href="favicon.png">
        <style>
            .button {
                width:100%;
                height:30px;
                font-size:16pt;
                line-height: 30px;
                padding-left: 5px;
            }
            
            .button:hover {
                background-color:rgb(240,240,240);
            }
            
            .button:active {
                background-color:rgb(230,230,230);
            }
            
            .websiteBrowser > a{
                color: black;
                text-decoration: none;
            }
            
            .websiteBrowser > a:active{
                color:black;
            }
            .websiteBrowser > a:hover{
                background-color:rgb(240,240,240);
            }
        </style>
    [/html]
[/head]
[siteBrowser]
    [center]
        [img width=50% styled=false hasPopup=false]favicon.png[/img]
    [/center]
    `
    `
    [link url="About.html"          ][button]About          [/button][/link]
    [link url="API-Reference.html"  ][button]API Reference  [/button][/link]
    [link url="Examples.html"  ][button]Examples  [/button][/link]
    `
    [link url="DML/About.html"       ][button]About DML          [/button][/link]
    [link url="DML/API-Reference.html"  ][button]DML API Reference  [/button][/link]
    `
    [link url="editor/editor.html"][button]Empirler Editor[/button][/link]
    [link url="https://github.com/TarVK/Empirler/tree/version-1.0"][button]Source Code[/button][/link]
    [html]
        <div style=position:absolute;left:0;bottom:0;padding:20px>
            By Tar van Krieken<br> and Sancarn
        </div>
    [/html]
[/siteBrowser]

#Templates
----
##Base Template
If you want to create your own syntax mode, you can work from the base template.`
The base template contains the proper structure, together with some really simple example code to see the main mechanics to work with.`
You can check this example out in the editor [link url="editor/editor.html#mode=tmpl base"]here[/link], or copy and paste from below.
[code name="Base Template" language="js"]
    if(typeof(module)=="undefined") var module = {}; //support node as well as client side transpiling
    module.exports = (function(Empirler, callback){
        var Syntax = Empirler.Syntax;
        var RuleSet = Empirler.RuleSet;
        var Rule = Empirler.Rule;
        
        //the rules to use
        var ruleSet = new RuleSet([
            new Rule({ //example rule
                name: "test",
                opening: "{",
                openingReplacement: "",
                closing: "}",
                closingReplacement: "",
                dataReplacement: function(text, callback){
                    console.log(this, arguments); //if you click the </> button in the top right of the code area you can toggle the console
                    this.input.fields.push(text);
                    return text.toUpperCase(); //callback only has to be used if return isn't used
                }
            })
        ]);
        
        //the completed syntax (rules and pre and post processor)
        var syntax = new Syntax({
            ruleSet: ruleSet,
            preProcessor: function(input, callback){
                callback = arguments[arguments.length-1]; //arguments might differ, but callback is always the last argument
                
                //assign data to be tracked during the transpiling, rules can acces this data
                input.fields = []; 
                
                //if you want to alter the input text, you can do input.text = 'text'
                
                callback();
            },
            postProcessor: function(input, content, callback){
                callback = arguments[arguments.length-1]; //arguments might differ, but callback is always the last argument
                
                var output = "test\n" + content;
                
                console.log(input.fields);
                    
                callback(output);
            }
        });
        //pre and postProcessor are optional and thus can be left out
        callback(syntax);
    });
[/code]
`
##Multifile Template
A template for making use of different files in the syntax mode empirler.`
The files of this template should all be stored in the directory 'formats' in empirler.`
You can check this example out in the editor [link url="editor/editor.html#mode=tmpl multifile"]here[/link], or copy and paste from below.
[code name="Multifile Template.js" language="js"]
    if(typeof(module)=="undefined") var module = {}; //support node as well as client side transpiling
    module.exports = (function(Empirler, callback){
        var Syntax = Empirler.Syntax;
        var RuleSet = Empirler.RuleSet;
        var Rule = Empirler.Rule;
        
        //the rules to use
        var ruleSet = new RuleSet([
            new Rule({ //example rule
                name: "test",
                opening: "{",
                openingReplacement: "",
                closing: "}",
                closingReplacement: "",
                dataReplacement: function(text, callback){
                    return text.toUpperCase(); //callback only has to be used if return isn't used
                }
            })
        ]);
        
        //the completed syntax (rules and pre and post processor)
        var syntax = new Syntax({
            ruleSet: ruleSet,
            postProcessor: function(input, content, callback){
                callback = arguments[arguments.length-1]; //arguments might differ, but callback is always the last argument
                
                Empirler.getFile("tmpl multifile.html", function(file){
                    callback(file.replace("[{contentArea}]", content));
                });
            }
        });
        //pre and postProcessor are optional and thus can be left out
        callback(syntax);
    });
[/code]
[code name="tmpl multifile.html" language="html"]
    <!DOCTYPE html>
    <html>
        <head>
            <link rel="stylesheet" href="/Formats/tmpl multifile.css" />
        </head>
        <body>
            preContent
            [{contentArea}]
            postContent
        </body>
    </html>
[/code]
[code name="tmpl multifile.css" language="css"]
    body{
        background-color: #ffdddd;
    }
[/code]
`
##BBcode Template
A template for using BBcode like tags in your syntax.`
You can check this example out in the editor [link url="editor/editor.html#mode=tmpl bbcode"]here[/link], or copy and paste from below.
[code name="BBcode Template" language="js"]
    if(typeof(module)=="undefined") var module = {}; //support node as well as client side transpiling
    module.exports = (function(Empirler, callback){
        var Syntax = Empirler.Syntax;
        var RuleSet = Empirler.RuleSet;
        var Rule = Empirler.Rule;
        
        //bbcode setup
        var getAttribute = function(match, name, validateRegex){
            var text = match.match[1]||"";;
            var regex = new RegExp("\\s"+name+"=('((\\\\.|[^'])*)'|\"((\\\\.|[^\"])*)\"|[^\\s\"]*)(\\s|$)", "i");
            var match = text.match(regex);
            if(match)
                if(match[2]!=null) match = match[2];
                else if(match[4]!=null) match = match[4];
                else match = match[1];
            
            if(validateRegex)
                return match&&match.match(validateRegex)? match: null;
            
            return match!=null? match: !!text.match(RegExp("(\\s|^)"+name+"(\\s|$)", "i"));
        };
        var getAtrributes = function(match){
            var regex = /\b(\w[^=]+)=?/g;
            var m;
            var attributes = [];
            while((m = regex.exec(match))){
                var key = m[1];
                var val = getAttribute({match:[0, match]}, key);
                
                attributes.push([key, val]);
                regex.lastIndex += (val.length||1);
            }
            return attributes;
        };
        var bb = [{
            normal: ["bb","BBcode"],
            selfClosing: ["cbb", "closingBBcode"],
            openingMatcher: function(data){
                return {
                    match:new RegExp("\\["+data+"(\\s(?:\\s*(?:=|\"(?:\\\\.|[^\"])*\"|'(?:\\\\.|[^'])*'|[^\\] =\"']*))*)?\\]", "i"),
                    getData: getAttribute, //get data is a special method and can be accessed through the node itself
                    getAttributes: getAtrributes //aby other defined mathods must be accessed through node.startMatch.exp.method
                };
            },
            deletionMatcher: function(data){
                return {match:/^( ){1,4}/, reset:/$/};
            },
            closingMatcher: function(data){
                return {
                    match:new RegExp("\\[\\/"+data+"(\\s(?:\\s*(?:=|\"(?:\\\\.|[^\"])*\"|'(?:\\\\.|[^'])*'|[^\\] =\"']*))*)?\\]", "i"),
                    getData: getAttribute,
                    getAttributes: getAtrributes
                };
            },
            openingReplacement: "",
            closingReplacement: ""
        }];
        
        //the rules to use
        var ruleSet = new RuleSet([
            new Rule({ //example rule
                name: "bold",
                bb: "b",
                or: "<b>",
                cr: "</b>"
            }, bb), new Rule({ //example rule2
                name: "margin",
                bb: ["m", "magin"],
                or: function(){
                    console.log(this);
                    return "<span style=margin-left:"+(this.getData("amount", /\d+/)||0)+"px;>"; //the regex is optional, will return false if retreived value doesn't match regex
                },
                cr: "</span>"
            }, bb),
        ]);
        
        //the completed syntax
        var syntax = new Syntax({
            ruleSet: ruleSet
        });
        callback(syntax);
    });
[/code]
`
`
#Examples
----
##Shorthand
Rules have some build in behaviour that helps with creating clean templates for rules.`
The shorthand format can be found [link url="API-Reference.html#Rule>shorthand"]here[/link].`
In the following example, a simple tag template is created and used in 2 example tags.`
You can check this example out in the editor [link url="editor/editor.html#mode=example%20shorthand"]here[/link], or copy and paste from below.
[code name="Shorthand Example" language="js"]
    if(typeof(module)=="undefined") var module = {}; //support node as well as client side transpiling
    module.exports = (function(Empirler, callback){
        var Syntax = Empirler.Syntax;
        var RuleSet = Empirler.RuleSet;
        var Rule = Empirler.Rule;
        
        //shorthand notation definition
        var sh = [{
            normal: ["tag"],
            selfClosing: ["sTag"], //you can leave this out if you don't want to allow for self closing rules
            openingMatcher: function(data){
                return { //return what would usually be defined in the rule's opening field
                    match: new RegExp("<(\!)?"+data+"(\!)?>"),  //a simple tag with possibily a exclamation mark at the start and end
                    getData: function(match, data){ //match is the Match object, data is the specified data that someone wants
                        match = match.match; //get the actual regex match itself
                        if(data=="start"){
                            return match[1]!=undefined;
                        }else{
                            return match[2]!=undefined;
                        }
                    }
                };
            },
            closingMatcher: function(data){
                return "</"+data+">"; //return a simple matcher
            },
            openingReplacement: "", //the default replacement for a rule if no replacement is defined
            closingReplacement: "" 
        }];
        
        //the rules to use
        var ruleSet = new RuleSet([
            new Rule({ //rule making use of the tag shorthand
                name: "test",
                tag: "test",
                openingReplacement: "#",
                closingReplacement: "#"
            }, sh),
            new Rule({ //rule making use of the tag shorthand
                name: "some_tag", //name doesn't affect behaviour
                tag: "tag",
                openingReplacement: function(){
                    if(this.getData("start")) return "<!";
                    else                      return "<";
                },
                closingReplacement: function(){
                    if(this.getData("end")) return "!>";
                    else                    return ">";
                },
            }, sh),
        ]);
        
        //the completed syntax (in this case only consisting of the actual rules)
        var syntax = new Syntax({ruleSet: ruleSet});
        //pre and postProcessor are optional and thus can be left out
        callback(syntax);
    });
[/code]
`
##Rule Stacking
Rules can define the set of rules that are allowed within the rule.`
This set of rules will built ontop of the baseSet, which by default is the set of current rules.`
The rules format can be found [link url="API-Reference.html#RuleSet"]here[/link].`
In the following example, a few example of rule sets will be given to show the type of behaviour you can get.`
You can check this example out in the editor [link url="editor/editor.html#mode=example rule stacking"]here[/link], or copy and paste from below.
[code name="Rule Stacking Example" language="js"]
    if(typeof(module)=="undefined") var module = {}; //support node as well as client side transpiling
    module.exports = (function(Empirler, callback){
        var Syntax = Empirler.Syntax;
        var RuleSet = Empirler.RuleSet;
        var Rule = Empirler.Rule;
        
        //the rules to use
        var ruleSet = new RuleSet([
            new Rule({ //create a group in which capitals will get additional formatting
                name: "capitals",
                opening: "{",
                openingReplacement: "",
                closing: "}",
                closingReplacement: "",
                rules: {
                    addition:[new Rule({ //detect capitals and apply additional formatting
                        name: "capital",
                        opening: /[A-Z]+/g,
                        openingReplacement: "<span style=text-decoration:underline>@0</span>"
                    })]
                }
            }), new Rule({ //create a group in which lower case character will get additional formatting
                name: "noCapitals",
                opening: "[",
                openingReplacement: "",
                closing: "]",
                closingReplacement: "",
                rules: {
                    addition:[new Rule({ //detect lower case characters and apply additional formatting
                        name: "lowerCase",
                        opening: /[a-z]+/g,
                        openingReplacement: "<span style=color:red>@0</span>"
                    })],
                    removal: [ //don't allow the capital rule to be used in this group
                        "capitals"
                    ]
                }
            }), new Rule({ //create a group in which capitals will get additional formatting, but only when directly in this group
                name: "capitalsDontCarry",
                opening: "(",
                openingReplacement: "",
                closing: ")",
                closingReplacement: "",
                rules: {
                    dontCarryAddition:[new Rule({ //detect capitals and apply additional formatting
                        name: "capitalDontCarry",
                        opening: /[A-Z]+/g,
                        openingReplacement: "<span style=text-decoration:underline>@0</span>"
                    })]
                }
            }), new Rule({ //create a group in which none of the rules apply
                name: "literal",
                opening: "-",
                openingReplacement: "",
                closing: "-",
                closingReplacement: "",
                rules: null
            })
        ]);
        
        var syntax = new Syntax({ruleSet: ruleSet});
        callback(syntax);
    });
[/code]
`
##Tracking Data
Rules can store information through the input object.`
This input object will be stored in all nodes and passed to the syntax's pre and post processor methods.`
In the following example, html header data will be stored in the input, in order to add an index to the page.`
You can check this example out in the editor [link url="editor/editor.html#mode=example tracking data"]here[/link], or copy and paste from below.
[code name="Data Tracking Example" language=js]
    if(typeof(module)=="undefined") var module = {}; //support node as well as client side transpiling
    module.exports = (function(Empirler, callback){
        var Syntax = Empirler.Syntax;
        var RuleSet = Empirler.RuleSet;
        var Rule = Empirler.Rule;
        
        var ruleSet = new RuleSet([
            new Rule({
                name: "header",
                opening: /<h([1-6])>/,
                closing: "</h@1>",
                openingReplacement: function(){
                    callback = arguments[arguments.length-1];
                    this.assembleContent(function(text){ //assemble the content of the header to set as the ID and store
                        this.input.titles.push(text); //this.input will be the same input passed to the pre and post processor
                        callback("<h@1 id='"+text+"'>");
                    });
                },
            })
        ]);
        
        //the completed syntax
        var syntax = new Syntax({
            ruleSet: ruleSet,
            preProcessor: function(input, callback){
                callback = arguments[arguments.length-1]; //arguments might differ, but callback is always the last argument
                input.titles = []; //create a field to store data in
                callback();
            },
            postProcessor: function(input, content, callback){
                callback = arguments[arguments.length-1]; //arguments might differ, but callback is always the last argument
                
                var index = "Contents:<br>";
                //Go through all titles that have been stored in the transpiling process
                for(var i=0; i<input.titles.length; i++){
                    var title = input.titles[i];
                    index += "<a href='#"+title+"'>"+title+"</a><br>";
                }
                index += "<br>";
                
                callback(index+content);
            }
        });
        callback(syntax);
    });
[/code]
`
##Tabs
It can be rather difficult to group indents together, but it is possible using some advanced functionality in Empirler.`
In the following example, the deletion matcher is used in order to only close an indent group if a line no longer has that level of indentation.`
You can check this example out in the editor [link url="editor/editor.html#mode=example tabs"]here[/link], or copy and paste from below.
[code name="Tabs Example" language=js]
    if(typeof(module)=="undefined") var module = {}; //support node as well as client side transpiling
    module.exports = (function(Empirler, callback){
        var Syntax = Empirler.Syntax;
        var RuleSet = Empirler.RuleSet;
        var Rule = Empirler.Rule;
        
        //the rules to use
        var ruleSet = new RuleSet([
            new Rule({ //The editor is setup to treat tab inputs as 4 spaces, but you could obviously adapt this to real tabs
                n: "indent",
                o: /^( +)/,
                d: {match:/^@0/, reset:/$/}, //@0 will be replaced by capture group 0 of the opening, thus only matching the same number of spaces
                c: {match:/^/, not:/^@0/, offset:1}, //offset says that the closing should be at least 1 character removed from the deletion and start. otherwise this element would close after doing its own deletion.
                f: false, //also wrap if no closing is found
                or: function(m){
                    return "<div class=tab style=margin-left:"+(m.length*10)+"px>\n"
                },
                cr: "</div>\n",
            }),
            new Rule({
                n: "newLine",
                o: /\n/,
                or: "<br>\n"
            })
        ]);
        
        //the completed syntax (rules and pre and post processor)
        var syntax = new Syntax({
            ruleSet: ruleSet,
            postProcessor: function(input, content, callback){
                callback = arguments[arguments.length-1];
                
                var groupVisualisation = true; //if set to true, adds some styling to visualise what is going on
                
                if(groupVisualisation)
                    callback([ //add some styling to the page in order to show how the data is grouped
                        "<style>",
                        "   .tab{",
                        "       margin: 2px;",
                        "       padding: 3px;",
                        "       width: fit-content;",
                        "       border: 1px solid black;",
                        "   }",
                        "</style>",
                        "<div class=tab>",
                        content,
                        "</div>"].join("\n")
                    );
                else 
                    callback(content);
            }
        });
        //pre and postProcessor are optional and thus can be left out
        callback(syntax);
    });
[/code]